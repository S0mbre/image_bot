import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
# from aiogram.utils import markdown as md
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import (ReplyKeyboardMarkup, InlineKeyboardMarkup, KeyboardButton, InlineKeyboardButton, 
                           Message, BufferedInputFile, ReplyKeyboardRemove, CallbackQuery)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.chat_action import ChatActionMiddleware, ChatActionSender
from io import BytesIO

from config import CONFIG
import imgsearch
import imgcap
import imgsimilar

# ============================================================ #

BOT_HELP = \
"""
–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∂—ë–ª—Ç—ã–π —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä", –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–æ—Ç 1 –¥–æ 50). 
–û—Ç–ø—Ä–∞–≤—å –±–æ—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç –µ—ë –æ–ø–∏—Å–∞–Ω–∏–µ.
"""

BTNS_NUMBER_IMAGES = ['1', '3', '5', '7', '10', '15', '20', '30', '40', '50', '‚ùå –û—Ç–º–µ–Ω–∞']
BTNS_IMG_ACTIONS = ['‚úç\n–û–ø–∏—Å–∞–Ω–∏–µ', '‚ùì\n–í–æ–ø—Ä–æ—Å', 'üë•\n–ü–æ—Ö–æ–∂–∏–µ', '‚ùå –û—Ç–º–µ–Ω–∞']
NL = '\n'
INFLECT_REPLY = {'1': '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '2': '–∫–∞—Ä—Ç–∏–Ω–∫–∏', '3': '–∫–∞—Ä—Ç–∏–Ω–∫–∏', '4': '–∫–∞—Ä—Ç–∏–Ω–∫–∏'}

# ============================================================ #

logging.basicConfig(level=logging.INFO)

bot = Bot(token=CONFIG.bot_token.get_secret_value())
dp = Dispatcher(storage=MemoryStorage())
dp.message.middleware(ChatActionMiddleware())

# ============================================================ #

class MyStates(StatesGroup):
    start_state = State()
    search_state = State()
    img_load_state = State()
    # img_summary_state = State()
    img_question_state = State()
    # img_findsimilar_state = State()

# ============================================================ #

def make_keyboard(items: list[str], placeholder: str = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', cols: int = 3) -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    builder.add(*[KeyboardButton(text=item) for item in items])
    builder.adjust(min(cols, len(items)))
    return builder.as_markup(resize_keyboard=True, input_field_placeholder=placeholder or None)

def make_keyboard_inline(items: list[dict], cols: int = 3) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.add(*[InlineKeyboardButton(**item) for item in items])
    builder.adjust(min(cols, len(items)))
    return builder.as_markup(resize_keyboard=True)

def inflect_num(num: int) -> str:
    last = str(num)[-1]
    return INFLECT_REPLY.get(last, '–∫–∞—Ä—Ç–∏–Ω–æ–∫')

# ================ 1 - –°–¢–ê–†–¢

@dp.message(Command(commands=['start', 'help']))
async def start(message: Message, state: FSMContext):
    if message.text != '/help':
        await state.clear()
        await state.set_state(MyStates.start_state)
    await message.answer(BOT_HELP)

# ================ 2 - –ü–û–ò–°–ö –ö–ê–†–¢–ò–ù–û–ö –ü–û –¢–ï–ö–°–¢–£

async def send_images(q: str, num: int, message: Message, state: FSMContext):    
    results = imgsearch.search(q=q, num=num)
    if results:
        for i, res in enumerate(results):
            reply_markup = ReplyKeyboardRemove() if i == 0 else None
            try:
                await message.answer_photo(BufferedInputFile(res.img, res.filename), 
                                           reply_markup=reply_markup)
            except Exception as err:
                logging.exception(err, exc_info=False)
                # await message.answer(f'üò© –ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}', reply_markup=reply_markup)
                continue
    else:
        await message.answer('ü§î –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', reply_markup=ReplyKeyboardRemove())
    await state.clear()
    await state.set_state(MyStates.start_state)

async def process_image_search(q: str, state: FSMContext, message: Message = None, callback: CallbackQuery = None):
    msg = message or callback.message
    try:
        num = int(msg.text if message else callback.data)
    except ValueError:
        await message.answer('‚õî –ù–∞–¥–æ —É–∫–∞–∑–∞—Ç—å –ß–ò–°–õ–û –∫–∞—Ä—Ç–∏–Ω–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä 3', 
                            reply_markup=ReplyKeyboardRemove())
        return

    if num < 1:
        await state.clear()
        await state.set_state(MyStates.start_state)
        await msg.answer('ü§∑ –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç...', reply_markup=ReplyKeyboardRemove())
        return
    if num > imgsearch.MAX_NUMBER:
        await msg.answer(f'‚ö† –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–µ –±–æ–ª–µ–µ {imgsearch.MAX_NUMBER} –∫–∞—Ä—Ç–∏–Ω–æ–∫', reply_markup=ReplyKeyboardRemove())
    if num > 14:
        await msg.answer(f'‚è≥ –ü–æ–∏—Å–∫ {num} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∑–∞–π–º–µ—Ç –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è ...', reply_markup=ReplyKeyboardRemove())
    await msg.answer(f'üîé –ò—â—É "{q}" –≤ Google ({num} {inflect_num(num)}) ...', 
                            reply_markup=ReplyKeyboardRemove())
    
    await send_images(q, num, msg, state)

@dp.message(MyStates.start_state, F.text)
async def search_images_get_query(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(MyStates.search_state)
    await state.update_data({'q': message.text})
    await message.answer(f'‚ùì –°–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞–π—Ç–∏ (–æ—Ç 1 –¥–æ {imgsearch.MAX_NUMBER})?{NL}–ù–∞–∂–º–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å "–æ—Ç–º–µ–Ω–∞" –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞.', 
                         reply_markup=make_keyboard_inline([{'text': s, 'callback_data': s} for s in BTNS_NUMBER_IMAGES], 5))
    
@dp.message(MyStates.search_state, F.text.regexp(r'(\d+)|(.*–æ—Ç–º–µ–Ω–∞)', flags=re.I))
async def search_images_process_query(message: Message, state: FSMContext, bot: Bot):    
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id, interval=2.0):
        data = await state.get_data()
        if not 'q' in data:
            await state.clear()
            await state.set_state(MyStates.start_state)
            await message.answer('‚õî –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞', 
                                reply_markup=ReplyKeyboardRemove())
            return
        if message.text.lower() == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await state.set_state(MyStates.start_state)
            await message.answer('ü§∑ –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç...', reply_markup=ReplyKeyboardRemove())
        else:
            await process_image_search(data['q'], state, message)

@dp.callback_query(MyStates.search_state, F.data.regexp(r'(\d+)|(.*–æ—Ç–º–µ–Ω–∞)', flags=re.I))
async def search_images_process_query_callback(callback: CallbackQuery, state: FSMContext, bot: Bot):    
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.chat.id, interval=2.0):
        data = await state.get_data()
        if not 'q' in data:
            await state.clear()
            await state.set_state(MyStates.start_state)
            await callback.message.answer('‚õî –ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–ª—é—á–µ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞', 
                                          reply_markup=ReplyKeyboardRemove())
            await callback.answer()
            return
        if callback.data.lower() == '–æ—Ç–º–µ–Ω–∞':
            await state.clear()
            await state.set_state(MyStates.start_state)
            await callback.message.answer('ü§∑ –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç...', reply_markup=ReplyKeyboardRemove())
        else:
            await process_image_search(data['q'], state, None, callback)
        await callback.answer()   

# ================ 3 - –ó–ê–ì–†–£–ó–ö–ê –ö–ê–†–¢–ò–ù–ö–ò

@dp.message(MyStates.start_state, F.photo)
async def image_load(message: Message, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id, interval=2.0):
        await state.clear()
        await state.set_state(MyStates.img_load_state)
        await message.answer(f'‚è≥ –ü—è—Ç—å —Å–µ–∫, –∑–∞–≥—Ä—É–∂–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É ...', reply_markup=ReplyKeyboardRemove())

        try:
            my_bytes_io: BytesIO = await bot.download(message.photo[-1])
            await state.update_data({'pic': my_bytes_io.getvalue()})
        except Exception as err:
            await state.clear()
            await state.set_state(MyStates.start_state)
            await message.answer(f'‚õî {str(err)}', reply_markup=ReplyKeyboardRemove())
            return
        finally:
            my_bytes_io.close()

        await message.answer('‚ùì –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?                        -', 
                            reply_markup=make_keyboard_inline([{'text': s, 'callback_data': s} for s in BTNS_IMG_ACTIONS], 3))

# ================ 4 - –ü–û–õ–£–ß–ï–ù–ò–ï –û–ü–ò–°–ê–ù–ò–Ø –ò–õ–ò –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–° –ö –ö–ê–†–¢–ò–ù–ö–ï

@dp.callback_query(MyStates.img_load_state, F.data.in_(BTNS_IMG_ACTIONS))
async def image_process_action(callback: CallbackQuery, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=callback.message.chat.id, interval=2.0):
        data = await state.get_data()
        if not 'pic' in data:
            await state.clear()
            await state.set_state(MyStates.start_state)
            await callback.message.answer('‚õî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ', 
                                          reply_markup=ReplyKeyboardRemove())
            await callback.answer()
            return
        
        pic: bytes = data['pic']

        if callback.data.endswith('–ø–∏—Å–∞–Ω–∏–µ'):
            await callback.message.answer(f'‚è≥ –ß—É—Ç–æ—á–∫—É –ø–æ–¥–æ–∂–¥—ë–º (–¥–æ 3 –º–∏–Ω—É—Ç) ...', reply_markup=ReplyKeyboardRemove())
            if not 'imcap' in data:
                bio = BytesIO(pic)
                await state.update_data({'imcap': imgcap.Imgcap(bio)})
                bio.close()
                data = await state.get_data()
            imcap = data['imcap']
            summary = await imcap.summary(3)
            await callback.message.answer('. '.join(summary) if summary else 'ü§î –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', reply_markup=ReplyKeyboardRemove())
            await callback.message.answer('‚ùì –ï—â–µ —á—Ç–æ-—Ç–æ?                                     -', 
                                          reply_markup=make_keyboard_inline([{'text': s, 'callback_data': s} for s in BTNS_IMG_ACTIONS], 3))
            await callback.answer()
            return

        elif callback.data.endswith('–æ–ø—Ä–æ—Å'):
            if not 'imcap' in data:
                await callback.message.answer(f'‚è≥ –ü—è—Ç—å —Å–µ–∫ ...', reply_markup=ReplyKeyboardRemove())
                bio = BytesIO(pic)
                await state.update_data({'imcap': imgcap.Imgcap(bio)})
                bio.close()
                data = await state.get_data()
            imcap = data['imcap']
            await callback.message.answer('–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å üëá', reply_markup=ReplyKeyboardRemove())
            await state.set_state(MyStates.img_question_state)
            await state.update_data({'imcap': imcap})
            await callback.answer()
            return

        elif callback.data.endswith('–æ—Ö–æ–∂–∏–µ'):
            await callback.message.answer(f'‚è≥ –ß—É—Ç–æ—á–∫—É –ø–æ–¥–æ–∂–¥—ë–º (–¥–æ 3 –º–∏–Ω—É—Ç) ...', reply_markup=ReplyKeyboardRemove())
            try:
                imsim = imgsimilar.Imgsimilar()            
                result: imgsimilar.SimilarResult = await imsim.upload_and_parse(data['pic'])
            except Exception as err:
                logging.debug(err, exc_info=True)
                await state.clear()
                await state.set_state(MyStates.start_state)
                await callback.message.answer('‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Ö–æ–∂–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫', 
                                              reply_markup=ReplyKeyboardRemove())
                await callback.answer()
                return
            else:
                sreply = ''
                if result.title and result.subtitle:
                    sreply += f'{result.title} - {result.subtitle}{NL}'
                if result.tags:
                    sreply += 'üü¢ ' + f'{NL}üü¢ '.join(result.tags) + NL
                if result.similar:
                    sreply += f'–ù–∞–π–¥–µ–Ω–æ {len(result.similar)} –ø–æ—Ö–æ–∂–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
                await callback.message.answer(sreply, 
                                              reply_markup=make_keyboard_inline([{'text': 'üî∫ –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É', 'url': result.url}], 1))
                await callback.message.answer('‚ùì –ï—â–µ —á—Ç–æ-—Ç–æ?                                     -', 
                                              reply_markup=make_keyboard_inline([{'text': s, 'callback_data': s} for s in BTNS_IMG_ACTIONS], 3))
                await callback.answer()
                return
        
        await state.clear()
        await state.set_state(MyStates.start_state)
        await callback.message.answer('ü§∑ –ù–µ—Ç —Ç–∞–∫ –Ω–µ—Ç...', reply_markup=ReplyKeyboardRemove())
        await callback.answer()

# ================ 5 - –û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–° –ö –ö–ê–†–¢–ò–ù–ö–ï

@dp.message(MyStates.img_question_state, F.text)
async def image_answer(message: Message, state: FSMContext, bot: Bot):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id, interval=2.0):
        data = await state.get_data()
        if not 'imcap' in data:
            await state.clear()
            await state.set_state(MyStates.start_state)
            await message.answer('‚õî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–Ω–æ–≤–æ', 
                                 reply_markup=ReplyKeyboardRemove())
            return
        
        imcap: imgcap.Imgcap = data['imcap']

        await message.answer(f'‚è≥ –ß—É—Ç–æ—á–∫—É –ø–æ–¥–æ–∂–¥—ë–º (–¥–æ 3 –º–∏–Ω—É—Ç) ...', reply_markup=ReplyKeyboardRemove())
        answer = await imcap.answer(message.text, 'ru')
        await message.answer(answer or 'ü§î –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=ReplyKeyboardRemove())
        await state.set_state(MyStates.img_load_state)
        await message.answer('‚ùì –ï—â–µ —á—Ç–æ-—Ç–æ?                                     -', 
                             reply_markup=make_keyboard_inline([{'text': s, 'callback_data': s} for s in BTNS_IMG_ACTIONS], 3))


# ============================================================ #

async def main():
    await dp.start_polling(bot, skip_updates=True)

if __name__ == '__main__':
    asyncio.run(main())